description: Test plan for commandArrayParsing.js


--------------------------------------------------------------------------------
testName: solveLehmerCode_validDataString
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations)
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations)
output: string (The delimited list of possible combinations generated by solving the Lehmer Code)

testName: solveLehmerCode_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<array<string>> (An array of data that contains 2 additional string parameters and the character specified for replacement from the input data) (testDataString)
output: ?

testName: solveLehmerCode_inValidDataInputMetaDataString
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: solveLehmerCode_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: solveLehmerCode_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: solveLehmerCode_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: solveLehmerCode_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: solveLehmerCode_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations) (inValidDataToStoreUndefined)
output: ?

testName: solveLehmerCode_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<array<string>> (The nested array that contains all instances of strings that should be used when generating permutations) (inValidDataToStoreNaN)
output: ?

testName: solveLehmerCode_inValidInputMetaDataUndefined
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations) (inValidDataToStoreUndefined)
input inputMetaData: undefined
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: solveLehmerCode_inValidInputMetaDataNaN
input inputData: array<integer> (The Lehmer code addressable index array we will use to permutate over all possible combinations) (inValidDataToStoreNaN)
input inputMetaData: NaN
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')
--------------------------------------------------------------------------------
testName: recursiveArrayExpansion_validDataString
input inputData: array<integer,array<integer>> (The index of expansion and the array to be expanded as an array object)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion)
output: array<array<integer>> (The final list of arrays after the array expansion has completed successfully)
NOTE: Execute function using commandAliasGenerator to get valid inputs for this function.

testName: recursiveArrayExpansion_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion) (testDataString)
output: ?

testName: recursiveArrayExpansion_inValidDataInputMetaDataString
input inputData: array<integer,array<integer>> (The index of expansion and the array to be expanded as an array object) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: recursiveArrayExpansion_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: recursiveArrayExpansion_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: array ([false,true,false])
output: ?

testName: recursiveArrayExpansion_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion) (inValidDataToStoreUndefined)
output: ?

testName: recursiveArrayExpansion_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<integer> (The Lehmer Codex that should be used to set the limit of expansion based on the index of expansion) (inValidDataToStoreNaN)
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataUndefined
input inputData: array<integer,array<integer>> (The index of expansion and the array to be expanded as an array object) (inValidDataToStoreUndefined)
input inputMetaData: undefined
output: ?

testName: recursiveArrayExpansion_inValidInputMetaDataNaN
input inputData: array<integer,array<integer>> (The index of expansion and the array to be expanded as an array object) (inValidDataToStoreNaN)
input inputMetaData: NaN
output: ?
--------------------------------------------------------------------------------
testName: getLehmerCodeValue_validDataString
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string)
output: string (The joined string from each of the array element strings at the Lehmer code indices)

testName: getLehmerCodeValue_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string) (testDataString)
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading 'l')

testName: getLehmerCodeValue_inValidDataInputMetaDataString
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: getLehmerCodeValue_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: getLehmerCodeValue_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: getLehmerCodeValue_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: getLehmerCodeValue_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string) (inValidDataToStoreUndefined)
output: ?

testName: getLehmerCodeValue_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string) (inValidDataToStoreNaN)
output: ?

testName: getLehmerCodeValue_inValidInputMetaDataUndefined
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return) (inValidDataToStoreUndefined)
input inputMetaData: undefined
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')

testName: getLehmerCodeValue_inValidInputMetaDataNaN
input inputData: array<integer> (The Lehmer code array with indices for values we should get & return) (inValidDataToStoreNaN)
input inputMetaData: NaN
output: ?
status: Failed
error: TypeError: Cannot read properties of undefined (reading '3')
--------------------------------------------------------------------------------
testName: generateCommandAliases_validDataString
input inputData: object ({"wonder":"wondr,wundr,wndr","Woman":"wman,wmn,womn","Amazing":"amzing,amzng"})
input inputMetaData: string (Not used for this business rule)
output: string (A coma-separated list of every possible combination of command aliases)

testName: generateCommandAliases_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: generateCommandAliases_inValidDataInputMetaDataString
input inputData: object ({"wonder":"wondr,wundr,wndr","Woman":"wman,wmn,womn","Amazing":"amzing,amzng"}) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: generateCommandAliases_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateCommandAliases_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: generateCommandAliases_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: generateCommandAliases_inValidInputMetaDataBoolean
input inputData: array<string> (["df","xg","24","34","6d","fg"])
input inputMetaData: boolean (false)
output: ?

testName: generateCommandAliases_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string) (inValidDataToStoreUndefined)
output: ?

testName: generateCommandAliases_inValidInputDataNaN
input inputData: NaN
input inputMetaData: array<array<string>> (The nested array of arrays with the values we should get and combine then return as a single string) (inValidDataToStoreNaN)
output: ?
--------------------------------------------------------------------------------
testName: aggregateCommandArguments_validDataString
input inputData: array<string> (An array of strings that represents the command and command parameters to execute)
input inputMetaData: string (Not used for this business rule)
output: string (A sinle string command line of code that should be sent to the command parser)

testName: aggregateCommandArguments_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: aggregateCommandArguments_inValidDataInputMetaDataString
input inputData: array<string> (An array of strings that represents the command and command parameters to execute) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: aggregateCommandArguments_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: aggregateCommandArguments_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: aggregateCommandArguments_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?
status: Failed
error: TypeError: inputData.replaceAll is not a function

testName: aggregateCommandArguments_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
status: Failed
error: TypeError: inputData.replaceAll is not a function

testName: aggregateCommandArguments_inValidInputDataUndefined
input inputData: undefined
input inputMetaData: string (Not used for this business rule) (inValidDataToStoreUndefined)
output: ?

testName: aggregateCommandArguments_inValidInputDataNaN
input inputData: NaN
input inputMetaData: string (Not used for this business rule) (inValidDataToStoreNaN)
output: ?
