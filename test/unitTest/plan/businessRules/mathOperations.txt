description: Test plan for mathOperations.js


--------------------------------------------------------------------------------
testName: hex2rgbConversion_validDataString
input inputData: string (The hexadecimal value that should be converted to an RGB value)
input inputMetaData: string (Not used for this business rule)
output: array<integer,integer,integer> (The RGB value)

testName: hex2rgbConversion_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: hex2rgbConversion_inValidDataInputMetaDataString
input inputData: string (The hexadecimal value that should be converted to an RGB value) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: hex2rgbConversion_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: hex2rgbConversion_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: hex2rgbConversion_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: hex2rgbConversion_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: isOdd_validDataString
input inputData: string (The value that should be evaluated to determine if it is odd or not odd)
input inputMetaData: string (Not used for this business rule)
output: boolean

testName: isOdd_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: isOdd_inValidDataInputMetaDataString
input inputData: string (The value that should be evaluated to determine if it is odd or not odd) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: isOdd_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: isOdd_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: isOdd_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: isOdd_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
--------------------------------------------------------------------------------
testName: isEven_validDataString
input inputData: string (The value that should be evaluated to determine if it is even or not even)
input inputMetaData: string (Not used for this business rule)
output: boolean

testName: isEven_inValidDataInputDataString
input inputData: string (dfxg24346dfg)
input inputMetaData: string (Not used for this business rule) (testDataString)
output: ?

testName: isEven_inValidDataInputMetaDataString
input inputData: string (The value that should be evaluated to determine if it is even or not even) (testDataString)
input inputMetaData: string (dfxg24346dfg)
output: ?

testName: isEven_inValidInputDataInteger
input inputData: integer (4567)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: isEven_inValidInputDataBoolean
input inputData: boolean (false)
input inputMetaData: array ([1,2,3,4,5])
output: ?

testName: isEven_inValidInputMetaDataInteger
input inputData: array ([1,2,3,4,5])
input inputMetaData: integer (4567)
output: ?

testName: isEven_inValidInputMetaDataBoolean
input inputData: array ([1,2,3,4,5])
input inputMetaData: boolean (false)
output: ?
